// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.6
// source: login5.proto

package v3

import (
	challenges "github.com/devgianlu/go-librespot/proto/spotify/login5/v3/challenges"
	credentials "github.com/devgianlu/go-librespot/proto/spotify/login5/v3/credentials"
	identifiers "github.com/devgianlu/go-librespot/proto/spotify/login5/v3/identifiers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoginError int32

const (
	LoginError_UNKNOWN_ERROR              LoginError = 0
	LoginError_INVALID_CREDENTIALS        LoginError = 1
	LoginError_BAD_REQUEST                LoginError = 2
	LoginError_UNSUPPORTED_LOGIN_PROTOCOL LoginError = 3
	LoginError_TIMEOUT                    LoginError = 4
	LoginError_UNKNOWN_IDENTIFIER         LoginError = 5
	LoginError_TOO_MANY_ATTEMPTS          LoginError = 6
	LoginError_INVALID_PHONENUMBER        LoginError = 7
	LoginError_TRY_AGAIN_LATER            LoginError = 8
)

// Enum value maps for LoginError.
var (
	LoginError_name = map[int32]string{
		0: "UNKNOWN_ERROR",
		1: "INVALID_CREDENTIALS",
		2: "BAD_REQUEST",
		3: "UNSUPPORTED_LOGIN_PROTOCOL",
		4: "TIMEOUT",
		5: "UNKNOWN_IDENTIFIER",
		6: "TOO_MANY_ATTEMPTS",
		7: "INVALID_PHONENUMBER",
		8: "TRY_AGAIN_LATER",
	}
	LoginError_value = map[string]int32{
		"UNKNOWN_ERROR":              0,
		"INVALID_CREDENTIALS":        1,
		"BAD_REQUEST":                2,
		"UNSUPPORTED_LOGIN_PROTOCOL": 3,
		"TIMEOUT":                    4,
		"UNKNOWN_IDENTIFIER":         5,
		"TOO_MANY_ATTEMPTS":          6,
		"INVALID_PHONENUMBER":        7,
		"TRY_AGAIN_LATER":            8,
	}
)

func (x LoginError) Enum() *LoginError {
	p := new(LoginError)
	*p = x
	return p
}

func (x LoginError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginError) Descriptor() protoreflect.EnumDescriptor {
	return file_login5_proto_enumTypes[0].Descriptor()
}

func (LoginError) Type() protoreflect.EnumType {
	return &file_login5_proto_enumTypes[0]
}

func (x LoginError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginError.Descriptor instead.
func (LoginError) EnumDescriptor() ([]byte, []int) {
	return file_login5_proto_rawDescGZIP(), []int{0}
}

type LoginResponse_Warnings int32

const (
	LoginResponse_UNKNOWN_WARNING             LoginResponse_Warnings = 0
	LoginResponse_DEPRECATED_PROTOCOL_VERSION LoginResponse_Warnings = 1
)

// Enum value maps for LoginResponse_Warnings.
var (
	LoginResponse_Warnings_name = map[int32]string{
		0: "UNKNOWN_WARNING",
		1: "DEPRECATED_PROTOCOL_VERSION",
	}
	LoginResponse_Warnings_value = map[string]int32{
		"UNKNOWN_WARNING":             0,
		"DEPRECATED_PROTOCOL_VERSION": 1,
	}
)

func (x LoginResponse_Warnings) Enum() *LoginResponse_Warnings {
	p := new(LoginResponse_Warnings)
	*p = x
	return p
}

func (x LoginResponse_Warnings) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginResponse_Warnings) Descriptor() protoreflect.EnumDescriptor {
	return file_login5_proto_enumTypes[1].Descriptor()
}

func (LoginResponse_Warnings) Type() protoreflect.EnumType {
	return &file_login5_proto_enumTypes[1]
}

func (x LoginResponse_Warnings) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginResponse_Warnings.Descriptor instead.
func (LoginResponse_Warnings) EnumDescriptor() ([]byte, []int) {
	return file_login5_proto_rawDescGZIP(), []int{6, 0}
}

type Challenges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges []*Challenge `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (x *Challenges) Reset() {
	*x = Challenges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login5_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenges) ProtoMessage() {}

func (x *Challenges) ProtoReflect() protoreflect.Message {
	mi := &file_login5_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenges.ProtoReflect.Descriptor instead.
func (*Challenges) Descriptor() ([]byte, []int) {
	return file_login5_proto_rawDescGZIP(), []int{0}
}

func (x *Challenges) GetChallenges() []*Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Challenge:
	//
	//	*Challenge_Hashcash
	//	*Challenge_Code
	Challenge isChallenge_Challenge `protobuf_oneof:"challenge"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login5_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_login5_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_login5_proto_rawDescGZIP(), []int{1}
}

func (m *Challenge) GetChallenge() isChallenge_Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (x *Challenge) GetHashcash() *challenges.HashcashChallenge {
	if x, ok := x.GetChallenge().(*Challenge_Hashcash); ok {
		return x.Hashcash
	}
	return nil
}

func (x *Challenge) GetCode() *challenges.CodeChallenge {
	if x, ok := x.GetChallenge().(*Challenge_Code); ok {
		return x.Code
	}
	return nil
}

type isChallenge_Challenge interface {
	isChallenge_Challenge()
}

type Challenge_Hashcash struct {
	Hashcash *challenges.HashcashChallenge `protobuf:"bytes,1,opt,name=hashcash,proto3,oneof"`
}

type Challenge_Code struct {
	Code *challenges.CodeChallenge `protobuf:"bytes,2,opt,name=code,proto3,oneof"`
}

func (*Challenge_Hashcash) isChallenge_Challenge() {}

func (*Challenge_Code) isChallenge_Challenge() {}

type ChallengeSolutions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Solutions []*ChallengeSolution `protobuf:"bytes,1,rep,name=solutions,proto3" json:"solutions,omitempty"`
}

func (x *ChallengeSolutions) Reset() {
	*x = ChallengeSolutions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login5_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeSolutions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeSolutions) ProtoMessage() {}

func (x *ChallengeSolutions) ProtoReflect() protoreflect.Message {
	mi := &file_login5_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeSolutions.ProtoReflect.Descriptor instead.
func (*ChallengeSolutions) Descriptor() ([]byte, []int) {
	return file_login5_proto_rawDescGZIP(), []int{2}
}

func (x *ChallengeSolutions) GetSolutions() []*ChallengeSolution {
	if x != nil {
		return x.Solutions
	}
	return nil
}

type ChallengeSolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Solution:
	//
	//	*ChallengeSolution_Hashcash
	//	*ChallengeSolution_Code
	Solution isChallengeSolution_Solution `protobuf_oneof:"solution"`
}

func (x *ChallengeSolution) Reset() {
	*x = ChallengeSolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login5_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeSolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeSolution) ProtoMessage() {}

func (x *ChallengeSolution) ProtoReflect() protoreflect.Message {
	mi := &file_login5_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeSolution.ProtoReflect.Descriptor instead.
func (*ChallengeSolution) Descriptor() ([]byte, []int) {
	return file_login5_proto_rawDescGZIP(), []int{3}
}

func (m *ChallengeSolution) GetSolution() isChallengeSolution_Solution {
	if m != nil {
		return m.Solution
	}
	return nil
}

func (x *ChallengeSolution) GetHashcash() *challenges.HashcashSolution {
	if x, ok := x.GetSolution().(*ChallengeSolution_Hashcash); ok {
		return x.Hashcash
	}
	return nil
}

func (x *ChallengeSolution) GetCode() *challenges.CodeSolution {
	if x, ok := x.GetSolution().(*ChallengeSolution_Code); ok {
		return x.Code
	}
	return nil
}

type isChallengeSolution_Solution interface {
	isChallengeSolution_Solution()
}

type ChallengeSolution_Hashcash struct {
	Hashcash *challenges.HashcashSolution `protobuf:"bytes,1,opt,name=hashcash,proto3,oneof"`
}

type ChallengeSolution_Code struct {
	Code *challenges.CodeSolution `protobuf:"bytes,2,opt,name=code,proto3,oneof"`
}

func (*ChallengeSolution_Hashcash) isChallengeSolution_Solution() {}

func (*ChallengeSolution_Code) isChallengeSolution_Solution() {}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientInfo         *ClientInfo         `protobuf:"bytes,1,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	LoginContext       []byte              `protobuf:"bytes,2,opt,name=login_context,json=loginContext,proto3" json:"login_context,omitempty"`
	ChallengeSolutions *ChallengeSolutions `protobuf:"bytes,3,opt,name=challenge_solutions,json=challengeSolutions,proto3" json:"challenge_solutions,omitempty"`
	// Types that are assignable to LoginMethod:
	//
	//	*LoginRequest_StoredCredential
	//	*LoginRequest_Password
	//	*LoginRequest_FacebookAccessToken
	//	*LoginRequest_PhoneNumber
	//	*LoginRequest_OneTimeToken
	//	*LoginRequest_ParentChildCredential
	//	*LoginRequest_AppleSignInCredential
	//	*LoginRequest_SamsungSignInCredential
	//	*LoginRequest_GoogleSignInCredential
	LoginMethod isLoginRequest_LoginMethod `protobuf_oneof:"login_method"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login5_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_login5_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_login5_proto_rawDescGZIP(), []int{4}
}

func (x *LoginRequest) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *LoginRequest) GetLoginContext() []byte {
	if x != nil {
		return x.LoginContext
	}
	return nil
}

func (x *LoginRequest) GetChallengeSolutions() *ChallengeSolutions {
	if x != nil {
		return x.ChallengeSolutions
	}
	return nil
}

func (m *LoginRequest) GetLoginMethod() isLoginRequest_LoginMethod {
	if m != nil {
		return m.LoginMethod
	}
	return nil
}

func (x *LoginRequest) GetStoredCredential() *credentials.StoredCredential {
	if x, ok := x.GetLoginMethod().(*LoginRequest_StoredCredential); ok {
		return x.StoredCredential
	}
	return nil
}

func (x *LoginRequest) GetPassword() *credentials.Password {
	if x, ok := x.GetLoginMethod().(*LoginRequest_Password); ok {
		return x.Password
	}
	return nil
}

func (x *LoginRequest) GetFacebookAccessToken() *credentials.FacebookAccessToken {
	if x, ok := x.GetLoginMethod().(*LoginRequest_FacebookAccessToken); ok {
		return x.FacebookAccessToken
	}
	return nil
}

func (x *LoginRequest) GetPhoneNumber() *identifiers.PhoneNumber {
	if x, ok := x.GetLoginMethod().(*LoginRequest_PhoneNumber); ok {
		return x.PhoneNumber
	}
	return nil
}

func (x *LoginRequest) GetOneTimeToken() *credentials.OneTimeToken {
	if x, ok := x.GetLoginMethod().(*LoginRequest_OneTimeToken); ok {
		return x.OneTimeToken
	}
	return nil
}

func (x *LoginRequest) GetParentChildCredential() *credentials.ParentChildCredential {
	if x, ok := x.GetLoginMethod().(*LoginRequest_ParentChildCredential); ok {
		return x.ParentChildCredential
	}
	return nil
}

func (x *LoginRequest) GetAppleSignInCredential() *credentials.AppleSignInCredential {
	if x, ok := x.GetLoginMethod().(*LoginRequest_AppleSignInCredential); ok {
		return x.AppleSignInCredential
	}
	return nil
}

func (x *LoginRequest) GetSamsungSignInCredential() *credentials.SamsungSignInCredential {
	if x, ok := x.GetLoginMethod().(*LoginRequest_SamsungSignInCredential); ok {
		return x.SamsungSignInCredential
	}
	return nil
}

func (x *LoginRequest) GetGoogleSignInCredential() *credentials.GoogleSignInCredential {
	if x, ok := x.GetLoginMethod().(*LoginRequest_GoogleSignInCredential); ok {
		return x.GoogleSignInCredential
	}
	return nil
}

type isLoginRequest_LoginMethod interface {
	isLoginRequest_LoginMethod()
}

type LoginRequest_StoredCredential struct {
	StoredCredential *credentials.StoredCredential `protobuf:"bytes,100,opt,name=stored_credential,json=storedCredential,proto3,oneof"`
}

type LoginRequest_Password struct {
	Password *credentials.Password `protobuf:"bytes,101,opt,name=password,proto3,oneof"`
}

type LoginRequest_FacebookAccessToken struct {
	FacebookAccessToken *credentials.FacebookAccessToken `protobuf:"bytes,102,opt,name=facebook_access_token,json=facebookAccessToken,proto3,oneof"`
}

type LoginRequest_PhoneNumber struct {
	PhoneNumber *identifiers.PhoneNumber `protobuf:"bytes,103,opt,name=phone_number,json=phoneNumber,proto3,oneof"`
}

type LoginRequest_OneTimeToken struct {
	OneTimeToken *credentials.OneTimeToken `protobuf:"bytes,104,opt,name=one_time_token,json=oneTimeToken,proto3,oneof"`
}

type LoginRequest_ParentChildCredential struct {
	ParentChildCredential *credentials.ParentChildCredential `protobuf:"bytes,105,opt,name=parent_child_credential,json=parentChildCredential,proto3,oneof"`
}

type LoginRequest_AppleSignInCredential struct {
	AppleSignInCredential *credentials.AppleSignInCredential `protobuf:"bytes,106,opt,name=apple_sign_in_credential,json=appleSignInCredential,proto3,oneof"`
}

type LoginRequest_SamsungSignInCredential struct {
	SamsungSignInCredential *credentials.SamsungSignInCredential `protobuf:"bytes,107,opt,name=samsung_sign_in_credential,json=samsungSignInCredential,proto3,oneof"`
}

type LoginRequest_GoogleSignInCredential struct {
	GoogleSignInCredential *credentials.GoogleSignInCredential `protobuf:"bytes,108,opt,name=google_sign_in_credential,json=googleSignInCredential,proto3,oneof"`
}

func (*LoginRequest_StoredCredential) isLoginRequest_LoginMethod() {}

func (*LoginRequest_Password) isLoginRequest_LoginMethod() {}

func (*LoginRequest_FacebookAccessToken) isLoginRequest_LoginMethod() {}

func (*LoginRequest_PhoneNumber) isLoginRequest_LoginMethod() {}

func (*LoginRequest_OneTimeToken) isLoginRequest_LoginMethod() {}

func (*LoginRequest_ParentChildCredential) isLoginRequest_LoginMethod() {}

func (*LoginRequest_AppleSignInCredential) isLoginRequest_LoginMethod() {}

func (*LoginRequest_SamsungSignInCredential) isLoginRequest_LoginMethod() {}

func (*LoginRequest_GoogleSignInCredential) isLoginRequest_LoginMethod() {}

type LoginOk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username             string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AccessToken          string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	StoredCredential     []byte `protobuf:"bytes,3,opt,name=stored_credential,json=storedCredential,proto3" json:"stored_credential,omitempty"`
	AccessTokenExpiresIn int32  `protobuf:"varint,4,opt,name=access_token_expires_in,json=accessTokenExpiresIn,proto3" json:"access_token_expires_in,omitempty"`
}

func (x *LoginOk) Reset() {
	*x = LoginOk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login5_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginOk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginOk) ProtoMessage() {}

func (x *LoginOk) ProtoReflect() protoreflect.Message {
	mi := &file_login5_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginOk.ProtoReflect.Descriptor instead.
func (*LoginOk) Descriptor() ([]byte, []int) {
	return file_login5_proto_rawDescGZIP(), []int{5}
}

func (x *LoginOk) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginOk) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginOk) GetStoredCredential() []byte {
	if x != nil {
		return x.StoredCredential
	}
	return nil
}

func (x *LoginOk) GetAccessTokenExpiresIn() int32 {
	if x != nil {
		return x.AccessTokenExpiresIn
	}
	return 0
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warnings        []LoginResponse_Warnings `protobuf:"varint,4,rep,packed,name=warnings,proto3,enum=spotify.login5.v3.LoginResponse_Warnings" json:"warnings,omitempty"`
	LoginContext    []byte                   `protobuf:"bytes,5,opt,name=login_context,json=loginContext,proto3" json:"login_context,omitempty"`
	IdentifierToken string                   `protobuf:"bytes,6,opt,name=identifier_token,json=identifierToken,proto3" json:"identifier_token,omitempty"`
	UserInfo        *UserInfo                `protobuf:"bytes,7,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	// Types that are assignable to Response:
	//
	//	*LoginResponse_Ok
	//	*LoginResponse_Error
	//	*LoginResponse_Challenges
	Response isLoginResponse_Response `protobuf_oneof:"response"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login5_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_login5_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_login5_proto_rawDescGZIP(), []int{6}
}

func (x *LoginResponse) GetWarnings() []LoginResponse_Warnings {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *LoginResponse) GetLoginContext() []byte {
	if x != nil {
		return x.LoginContext
	}
	return nil
}

func (x *LoginResponse) GetIdentifierToken() string {
	if x != nil {
		return x.IdentifierToken
	}
	return ""
}

func (x *LoginResponse) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (m *LoginResponse) GetResponse() isLoginResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *LoginResponse) GetOk() *LoginOk {
	if x, ok := x.GetResponse().(*LoginResponse_Ok); ok {
		return x.Ok
	}
	return nil
}

func (x *LoginResponse) GetError() LoginError {
	if x, ok := x.GetResponse().(*LoginResponse_Error); ok {
		return x.Error
	}
	return LoginError_UNKNOWN_ERROR
}

func (x *LoginResponse) GetChallenges() *Challenges {
	if x, ok := x.GetResponse().(*LoginResponse_Challenges); ok {
		return x.Challenges
	}
	return nil
}

type isLoginResponse_Response interface {
	isLoginResponse_Response()
}

type LoginResponse_Ok struct {
	Ok *LoginOk `protobuf:"bytes,1,opt,name=ok,proto3,oneof"`
}

type LoginResponse_Error struct {
	Error LoginError `protobuf:"varint,2,opt,name=error,proto3,enum=spotify.login5.v3.LoginError,oneof"`
}

type LoginResponse_Challenges struct {
	Challenges *Challenges `protobuf:"bytes,3,opt,name=challenges,proto3,oneof"`
}

func (*LoginResponse_Ok) isLoginResponse_Response() {}

func (*LoginResponse_Error) isLoginResponse_Response() {}

func (*LoginResponse_Challenges) isLoginResponse_Response() {}

var File_login5_proto protoreflect.FileDescriptor

var file_login5_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76,
	0x33, 0x1a, 0x18, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x35, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x35, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x70, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x4d, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x63, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x63, 0x61, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x63, 0x61, 0x73, 0x68,
	0x12, 0x41, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e,
	0x76, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x22, 0x58, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x70, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x63, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x63, 0x61, 0x73, 0x68, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x63, 0x61, 0x73, 0x68, 0x12, 0x40,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x08, 0x0a,
	0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35,
	0x2e, 0x76, 0x33, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x11, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x68, 0x0a, 0x15, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x35, 0x2e, 0x76, 0x33, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4f, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x6e, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x6f, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x75, 0x0a, 0x1a, 0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x17, 0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x72, 0x0a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x0e, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xac, 0x01,
	0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x22, 0xd4, 0x03, 0x0a,
	0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x35, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x6b, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x35, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x08, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2a, 0xd3, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59,
	0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x53, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x47, 0x41, 0x49,
	0x4e, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x08, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x67, 0x69, 0x61, 0x6e, 0x6c,
	0x75, 0x2f, 0x67, 0x6f, 0x2d, 0x6c, 0x69, 0x62, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x35, 0x2f, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_login5_proto_rawDescOnce sync.Once
	file_login5_proto_rawDescData = file_login5_proto_rawDesc
)

func file_login5_proto_rawDescGZIP() []byte {
	file_login5_proto_rawDescOnce.Do(func() {
		file_login5_proto_rawDescData = protoimpl.X.CompressGZIP(file_login5_proto_rawDescData)
	})
	return file_login5_proto_rawDescData
}

var file_login5_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_login5_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_login5_proto_goTypes = []interface{}{
	(LoginError)(0),                             // 0: spotify.login5.v3.LoginError
	(LoginResponse_Warnings)(0),                 // 1: spotify.login5.v3.LoginResponse.Warnings
	(*Challenges)(nil),                          // 2: spotify.login5.v3.Challenges
	(*Challenge)(nil),                           // 3: spotify.login5.v3.Challenge
	(*ChallengeSolutions)(nil),                  // 4: spotify.login5.v3.ChallengeSolutions
	(*ChallengeSolution)(nil),                   // 5: spotify.login5.v3.ChallengeSolution
	(*LoginRequest)(nil),                        // 6: spotify.login5.v3.LoginRequest
	(*LoginOk)(nil),                             // 7: spotify.login5.v3.LoginOk
	(*LoginResponse)(nil),                       // 8: spotify.login5.v3.LoginResponse
	(*challenges.HashcashChallenge)(nil),        // 9: spotify.login5.v3.challenges.HashcashChallenge
	(*challenges.CodeChallenge)(nil),            // 10: spotify.login5.v3.challenges.CodeChallenge
	(*challenges.HashcashSolution)(nil),         // 11: spotify.login5.v3.challenges.HashcashSolution
	(*challenges.CodeSolution)(nil),             // 12: spotify.login5.v3.challenges.CodeSolution
	(*ClientInfo)(nil),                          // 13: spotify.login5.v3.ClientInfo
	(*credentials.StoredCredential)(nil),        // 14: spotify.login5.v3.credentials.StoredCredential
	(*credentials.Password)(nil),                // 15: spotify.login5.v3.credentials.Password
	(*credentials.FacebookAccessToken)(nil),     // 16: spotify.login5.v3.credentials.FacebookAccessToken
	(*identifiers.PhoneNumber)(nil),             // 17: spotify.login5.v3.identifiers.PhoneNumber
	(*credentials.OneTimeToken)(nil),            // 18: spotify.login5.v3.credentials.OneTimeToken
	(*credentials.ParentChildCredential)(nil),   // 19: spotify.login5.v3.credentials.ParentChildCredential
	(*credentials.AppleSignInCredential)(nil),   // 20: spotify.login5.v3.credentials.AppleSignInCredential
	(*credentials.SamsungSignInCredential)(nil), // 21: spotify.login5.v3.credentials.SamsungSignInCredential
	(*credentials.GoogleSignInCredential)(nil),  // 22: spotify.login5.v3.credentials.GoogleSignInCredential
	(*UserInfo)(nil),                            // 23: spotify.login5.v3.UserInfo
}
var file_login5_proto_depIdxs = []int32{
	3,  // 0: spotify.login5.v3.Challenges.challenges:type_name -> spotify.login5.v3.Challenge
	9,  // 1: spotify.login5.v3.Challenge.hashcash:type_name -> spotify.login5.v3.challenges.HashcashChallenge
	10, // 2: spotify.login5.v3.Challenge.code:type_name -> spotify.login5.v3.challenges.CodeChallenge
	5,  // 3: spotify.login5.v3.ChallengeSolutions.solutions:type_name -> spotify.login5.v3.ChallengeSolution
	11, // 4: spotify.login5.v3.ChallengeSolution.hashcash:type_name -> spotify.login5.v3.challenges.HashcashSolution
	12, // 5: spotify.login5.v3.ChallengeSolution.code:type_name -> spotify.login5.v3.challenges.CodeSolution
	13, // 6: spotify.login5.v3.LoginRequest.client_info:type_name -> spotify.login5.v3.ClientInfo
	4,  // 7: spotify.login5.v3.LoginRequest.challenge_solutions:type_name -> spotify.login5.v3.ChallengeSolutions
	14, // 8: spotify.login5.v3.LoginRequest.stored_credential:type_name -> spotify.login5.v3.credentials.StoredCredential
	15, // 9: spotify.login5.v3.LoginRequest.password:type_name -> spotify.login5.v3.credentials.Password
	16, // 10: spotify.login5.v3.LoginRequest.facebook_access_token:type_name -> spotify.login5.v3.credentials.FacebookAccessToken
	17, // 11: spotify.login5.v3.LoginRequest.phone_number:type_name -> spotify.login5.v3.identifiers.PhoneNumber
	18, // 12: spotify.login5.v3.LoginRequest.one_time_token:type_name -> spotify.login5.v3.credentials.OneTimeToken
	19, // 13: spotify.login5.v3.LoginRequest.parent_child_credential:type_name -> spotify.login5.v3.credentials.ParentChildCredential
	20, // 14: spotify.login5.v3.LoginRequest.apple_sign_in_credential:type_name -> spotify.login5.v3.credentials.AppleSignInCredential
	21, // 15: spotify.login5.v3.LoginRequest.samsung_sign_in_credential:type_name -> spotify.login5.v3.credentials.SamsungSignInCredential
	22, // 16: spotify.login5.v3.LoginRequest.google_sign_in_credential:type_name -> spotify.login5.v3.credentials.GoogleSignInCredential
	1,  // 17: spotify.login5.v3.LoginResponse.warnings:type_name -> spotify.login5.v3.LoginResponse.Warnings
	23, // 18: spotify.login5.v3.LoginResponse.user_info:type_name -> spotify.login5.v3.UserInfo
	7,  // 19: spotify.login5.v3.LoginResponse.ok:type_name -> spotify.login5.v3.LoginOk
	0,  // 20: spotify.login5.v3.LoginResponse.error:type_name -> spotify.login5.v3.LoginError
	2,  // 21: spotify.login5.v3.LoginResponse.challenges:type_name -> spotify.login5.v3.Challenges
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_login5_proto_init() }
func file_login5_proto_init() {
	if File_login5_proto != nil {
		return
	}
	file_login5_client_info_proto_init()
	file_login5_user_info_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_login5_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login5_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login5_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeSolutions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login5_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeSolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login5_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login5_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginOk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login5_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_login5_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Challenge_Hashcash)(nil),
		(*Challenge_Code)(nil),
	}
	file_login5_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ChallengeSolution_Hashcash)(nil),
		(*ChallengeSolution_Code)(nil),
	}
	file_login5_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*LoginRequest_StoredCredential)(nil),
		(*LoginRequest_Password)(nil),
		(*LoginRequest_FacebookAccessToken)(nil),
		(*LoginRequest_PhoneNumber)(nil),
		(*LoginRequest_OneTimeToken)(nil),
		(*LoginRequest_ParentChildCredential)(nil),
		(*LoginRequest_AppleSignInCredential)(nil),
		(*LoginRequest_SamsungSignInCredential)(nil),
		(*LoginRequest_GoogleSignInCredential)(nil),
	}
	file_login5_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*LoginResponse_Ok)(nil),
		(*LoginResponse_Error)(nil),
		(*LoginResponse_Challenges)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_login5_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_login5_proto_goTypes,
		DependencyIndexes: file_login5_proto_depIdxs,
		EnumInfos:         file_login5_proto_enumTypes,
		MessageInfos:      file_login5_proto_msgTypes,
	}.Build()
	File_login5_proto = out.File
	file_login5_proto_rawDesc = nil
	file_login5_proto_goTypes = nil
	file_login5_proto_depIdxs = nil
}
