// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: spotify/netfortune/net_fortune.proto

package netfortune

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetFortuneResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AdvisedAudioBitrate int32                  `protobuf:"varint,1,opt,name=advised_audio_bitrate,json=advisedAudioBitrate,proto3" json:"advised_audio_bitrate,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetFortuneResponse) Reset() {
	*x = NetFortuneResponse{}
	mi := &file_spotify_netfortune_net_fortune_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetFortuneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetFortuneResponse) ProtoMessage() {}

func (x *NetFortuneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_netfortune_net_fortune_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetFortuneResponse.ProtoReflect.Descriptor instead.
func (*NetFortuneResponse) Descriptor() ([]byte, []int) {
	return file_spotify_netfortune_net_fortune_proto_rawDescGZIP(), []int{0}
}

func (x *NetFortuneResponse) GetAdvisedAudioBitrate() int32 {
	if x != nil {
		return x.AdvisedAudioBitrate
	}
	return 0
}

type NetFortuneV2Response struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PredictId           string                 `protobuf:"bytes,1,opt,name=predict_id,json=predictId,proto3" json:"predict_id,omitempty"`
	EstimatedMaxBitrate int32                  `protobuf:"varint,2,opt,name=estimated_max_bitrate,json=estimatedMaxBitrate,proto3" json:"estimated_max_bitrate,omitempty"`
	// Types that are valid to be assigned to XAdvisedPrefetchBitrateMetered:
	//
	//	*NetFortuneV2Response_AdvisedPrefetchBitrateMetered
	XAdvisedPrefetchBitrateMetered isNetFortuneV2Response_XAdvisedPrefetchBitrateMetered `protobuf_oneof:"_advised_prefetch_bitrate_metered"`
	// Types that are valid to be assigned to XAdvisedPrefetchBitrateNonMetered:
	//
	//	*NetFortuneV2Response_AdvisedPrefetchBitrateNonMetered
	XAdvisedPrefetchBitrateNonMetered isNetFortuneV2Response_XAdvisedPrefetchBitrateNonMetered `protobuf_oneof:"_advised_prefetch_bitrate_non_metered"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *NetFortuneV2Response) Reset() {
	*x = NetFortuneV2Response{}
	mi := &file_spotify_netfortune_net_fortune_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetFortuneV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetFortuneV2Response) ProtoMessage() {}

func (x *NetFortuneV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_netfortune_net_fortune_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetFortuneV2Response.ProtoReflect.Descriptor instead.
func (*NetFortuneV2Response) Descriptor() ([]byte, []int) {
	return file_spotify_netfortune_net_fortune_proto_rawDescGZIP(), []int{1}
}

func (x *NetFortuneV2Response) GetPredictId() string {
	if x != nil {
		return x.PredictId
	}
	return ""
}

func (x *NetFortuneV2Response) GetEstimatedMaxBitrate() int32 {
	if x != nil {
		return x.EstimatedMaxBitrate
	}
	return 0
}

func (x *NetFortuneV2Response) GetXAdvisedPrefetchBitrateMetered() isNetFortuneV2Response_XAdvisedPrefetchBitrateMetered {
	if x != nil {
		return x.XAdvisedPrefetchBitrateMetered
	}
	return nil
}

func (x *NetFortuneV2Response) GetAdvisedPrefetchBitrateMetered() int32 {
	if x != nil {
		if x, ok := x.XAdvisedPrefetchBitrateMetered.(*NetFortuneV2Response_AdvisedPrefetchBitrateMetered); ok {
			return x.AdvisedPrefetchBitrateMetered
		}
	}
	return 0
}

func (x *NetFortuneV2Response) GetXAdvisedPrefetchBitrateNonMetered() isNetFortuneV2Response_XAdvisedPrefetchBitrateNonMetered {
	if x != nil {
		return x.XAdvisedPrefetchBitrateNonMetered
	}
	return nil
}

func (x *NetFortuneV2Response) GetAdvisedPrefetchBitrateNonMetered() int32 {
	if x != nil {
		if x, ok := x.XAdvisedPrefetchBitrateNonMetered.(*NetFortuneV2Response_AdvisedPrefetchBitrateNonMetered); ok {
			return x.AdvisedPrefetchBitrateNonMetered
		}
	}
	return 0
}

type isNetFortuneV2Response_XAdvisedPrefetchBitrateMetered interface {
	isNetFortuneV2Response_XAdvisedPrefetchBitrateMetered()
}

type NetFortuneV2Response_AdvisedPrefetchBitrateMetered struct {
	AdvisedPrefetchBitrateMetered int32 `protobuf:"varint,3,opt,name=advised_prefetch_bitrate_metered,json=advisedPrefetchBitrateMetered,proto3,oneof"`
}

func (*NetFortuneV2Response_AdvisedPrefetchBitrateMetered) isNetFortuneV2Response_XAdvisedPrefetchBitrateMetered() {
}

type isNetFortuneV2Response_XAdvisedPrefetchBitrateNonMetered interface {
	isNetFortuneV2Response_XAdvisedPrefetchBitrateNonMetered()
}

type NetFortuneV2Response_AdvisedPrefetchBitrateNonMetered struct {
	AdvisedPrefetchBitrateNonMetered int32 `protobuf:"varint,4,opt,name=advised_prefetch_bitrate_non_metered,json=advisedPrefetchBitrateNonMetered,proto3,oneof"`
}

func (*NetFortuneV2Response_AdvisedPrefetchBitrateNonMetered) isNetFortuneV2Response_XAdvisedPrefetchBitrateNonMetered() {
}

var File_spotify_netfortune_net_fortune_proto protoreflect.FileDescriptor

var file_spotify_netfortune_net_fortune_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x6e, 0x65, 0x74, 0x66, 0x6f, 0x72,
	0x74, 0x75, 0x6e, 0x65, 0x2f, 0x6e, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x4e, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x74,
	0x75, 0x6e, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x49, 0x0a, 0x20, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x1d, 0x61, 0x64,
	0x76, 0x69, 0x73, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x24, 0x61,
	0x64, 0x76, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x20, 0x61, 0x64, 0x76,
	0x69, 0x73, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x42, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x42, 0x23, 0x0a,
	0x21, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x42, 0xce, 0x01, 0x0a, 0x16,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x42, 0x0f, 0x4e, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x74, 0x75,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x67, 0x69, 0x61, 0x6e, 0x6c, 0x75, 0x2f,
	0x67, 0x6f, 0x2d, 0x6c, 0x69, 0x62, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x6e, 0x65, 0x74, 0x66, 0x6f,
	0x72, 0x74, 0x75, 0x6e, 0x65, 0xa2, 0x02, 0x03, 0x53, 0x4e, 0x58, 0xaa, 0x02, 0x12, 0x53, 0x70,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65,
	0xca, 0x02, 0x12, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5c, 0x4e, 0x65, 0x74, 0x66, 0x6f,
	0x72, 0x74, 0x75, 0x6e, 0x65, 0xe2, 0x02, 0x1e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5c,
	0x4e, 0x65, 0x74, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x3a, 0x3a, 0x4e, 0x65, 0x74, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spotify_netfortune_net_fortune_proto_rawDescOnce sync.Once
	file_spotify_netfortune_net_fortune_proto_rawDescData = file_spotify_netfortune_net_fortune_proto_rawDesc
)

func file_spotify_netfortune_net_fortune_proto_rawDescGZIP() []byte {
	file_spotify_netfortune_net_fortune_proto_rawDescOnce.Do(func() {
		file_spotify_netfortune_net_fortune_proto_rawDescData = protoimpl.X.CompressGZIP(file_spotify_netfortune_net_fortune_proto_rawDescData)
	})
	return file_spotify_netfortune_net_fortune_proto_rawDescData
}

var file_spotify_netfortune_net_fortune_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_spotify_netfortune_net_fortune_proto_goTypes = []any{
	(*NetFortuneResponse)(nil),   // 0: spotify.netfortune.NetFortuneResponse
	(*NetFortuneV2Response)(nil), // 1: spotify.netfortune.NetFortuneV2Response
}
var file_spotify_netfortune_net_fortune_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_spotify_netfortune_net_fortune_proto_init() }
func file_spotify_netfortune_net_fortune_proto_init() {
	if File_spotify_netfortune_net_fortune_proto != nil {
		return
	}
	file_spotify_netfortune_net_fortune_proto_msgTypes[1].OneofWrappers = []any{
		(*NetFortuneV2Response_AdvisedPrefetchBitrateMetered)(nil),
		(*NetFortuneV2Response_AdvisedPrefetchBitrateNonMetered)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spotify_netfortune_net_fortune_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spotify_netfortune_net_fortune_proto_goTypes,
		DependencyIndexes: file_spotify_netfortune_net_fortune_proto_depIdxs,
		MessageInfos:      file_spotify_netfortune_net_fortune_proto_msgTypes,
	}.Build()
	File_spotify_netfortune_net_fortune_proto = out.File
	file_spotify_netfortune_net_fortune_proto_rawDesc = nil
	file_spotify_netfortune_net_fortune_proto_goTypes = nil
	file_spotify_netfortune_net_fortune_proto_depIdxs = nil
}
