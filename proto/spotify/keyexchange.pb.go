// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.6
// source: keyexchange.proto

package spotify

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Product int32

const (
	Product_PRODUCT_CLIENT              Product = 0
	Product_PRODUCT_LIBSPOTIFY          Product = 1
	Product_PRODUCT_MOBILE              Product = 2
	Product_PRODUCT_PARTNER             Product = 3
	Product_PRODUCT_LIBSPOTIFY_EMBEDDED Product = 5
)

// Enum value maps for Product.
var (
	Product_name = map[int32]string{
		0: "PRODUCT_CLIENT",
		1: "PRODUCT_LIBSPOTIFY",
		2: "PRODUCT_MOBILE",
		3: "PRODUCT_PARTNER",
		5: "PRODUCT_LIBSPOTIFY_EMBEDDED",
	}
	Product_value = map[string]int32{
		"PRODUCT_CLIENT":              0,
		"PRODUCT_LIBSPOTIFY":          1,
		"PRODUCT_MOBILE":              2,
		"PRODUCT_PARTNER":             3,
		"PRODUCT_LIBSPOTIFY_EMBEDDED": 5,
	}
)

func (x Product) Enum() *Product {
	p := new(Product)
	*p = x
	return p
}

func (x Product) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Product) Descriptor() protoreflect.EnumDescriptor {
	return file_keyexchange_proto_enumTypes[0].Descriptor()
}

func (Product) Type() protoreflect.EnumType {
	return &file_keyexchange_proto_enumTypes[0]
}

func (x Product) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Product) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Product(num)
	return nil
}

// Deprecated: Use Product.Descriptor instead.
func (Product) EnumDescriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{0}
}

type ProductFlags int32

const (
	ProductFlags_PRODUCT_FLAG_NONE      ProductFlags = 0
	ProductFlags_PRODUCT_FLAG_DEV_BUILD ProductFlags = 1
)

// Enum value maps for ProductFlags.
var (
	ProductFlags_name = map[int32]string{
		0: "PRODUCT_FLAG_NONE",
		1: "PRODUCT_FLAG_DEV_BUILD",
	}
	ProductFlags_value = map[string]int32{
		"PRODUCT_FLAG_NONE":      0,
		"PRODUCT_FLAG_DEV_BUILD": 1,
	}
)

func (x ProductFlags) Enum() *ProductFlags {
	p := new(ProductFlags)
	*p = x
	return p
}

func (x ProductFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_keyexchange_proto_enumTypes[1].Descriptor()
}

func (ProductFlags) Type() protoreflect.EnumType {
	return &file_keyexchange_proto_enumTypes[1]
}

func (x ProductFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProductFlags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProductFlags(num)
	return nil
}

// Deprecated: Use ProductFlags.Descriptor instead.
func (ProductFlags) EnumDescriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{1}
}

type Platform int32

const (
	Platform_PLATFORM_WIN32_X86       Platform = 0
	Platform_PLATFORM_OSX_X86         Platform = 1
	Platform_PLATFORM_LINUX_X86       Platform = 2
	Platform_PLATFORM_IPHONE_ARM      Platform = 3
	Platform_PLATFORM_S60_ARM         Platform = 4
	Platform_PLATFORM_OSX_PPC         Platform = 5
	Platform_PLATFORM_ANDROID_ARM     Platform = 6
	Platform_PLATFORM_WINDOWS_CE_ARM  Platform = 7
	Platform_PLATFORM_LINUX_X86_64    Platform = 8
	Platform_PLATFORM_OSX_X86_64      Platform = 9
	Platform_PLATFORM_PALM_ARM        Platform = 10
	Platform_PLATFORM_LINUX_SH        Platform = 11
	Platform_PLATFORM_FREEBSD_X86     Platform = 12
	Platform_PLATFORM_FREEBSD_X86_64  Platform = 13
	Platform_PLATFORM_BLACKBERRY_ARM  Platform = 14
	Platform_PLATFORM_SONOS           Platform = 15
	Platform_PLATFORM_LINUX_MIPS      Platform = 16
	Platform_PLATFORM_LINUX_ARM       Platform = 17
	Platform_PLATFORM_LOGITECH_ARM    Platform = 18
	Platform_PLATFORM_LINUX_BLACKFIN  Platform = 19
	Platform_PLATFORM_WP7_ARM         Platform = 20
	Platform_PLATFORM_ONKYO_ARM       Platform = 21
	Platform_PLATFORM_QNXNTO_ARM      Platform = 22
	Platform_PLATFORM_BCO_ARM         Platform = 23
	Platform_PLATFORM_WEBPLAYER       Platform = 24
	Platform_PLATFORM_WP8_ARM         Platform = 25
	Platform_PLATFORM_WP8_X86         Platform = 26
	Platform_PLATFORM_WINRT_ARM       Platform = 27
	Platform_PLATFORM_WINRT_X86       Platform = 28
	Platform_PLATFORM_WINRT_X86_64    Platform = 29
	Platform_PLATFORM_FRONTIER        Platform = 30
	Platform_PLATFORM_AMIGA_PPC       Platform = 31
	Platform_PLATFORM_NANRADIO_NRX901 Platform = 32
	Platform_PLATFORM_HARMAN_ARM      Platform = 33
	Platform_PLATFORM_SONY_PS3        Platform = 34
	Platform_PLATFORM_SONY_PS4        Platform = 35
	Platform_PLATFORM_IPHONE_ARM64    Platform = 36
	Platform_PLATFORM_RTEMS_PPC       Platform = 37
	Platform_PLATFORM_GENERIC_PARTNER Platform = 38
	Platform_PLATFORM_WIN32_X86_64    Platform = 39
	Platform_PLATFORM_WATCHOS         Platform = 40
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0:  "PLATFORM_WIN32_X86",
		1:  "PLATFORM_OSX_X86",
		2:  "PLATFORM_LINUX_X86",
		3:  "PLATFORM_IPHONE_ARM",
		4:  "PLATFORM_S60_ARM",
		5:  "PLATFORM_OSX_PPC",
		6:  "PLATFORM_ANDROID_ARM",
		7:  "PLATFORM_WINDOWS_CE_ARM",
		8:  "PLATFORM_LINUX_X86_64",
		9:  "PLATFORM_OSX_X86_64",
		10: "PLATFORM_PALM_ARM",
		11: "PLATFORM_LINUX_SH",
		12: "PLATFORM_FREEBSD_X86",
		13: "PLATFORM_FREEBSD_X86_64",
		14: "PLATFORM_BLACKBERRY_ARM",
		15: "PLATFORM_SONOS",
		16: "PLATFORM_LINUX_MIPS",
		17: "PLATFORM_LINUX_ARM",
		18: "PLATFORM_LOGITECH_ARM",
		19: "PLATFORM_LINUX_BLACKFIN",
		20: "PLATFORM_WP7_ARM",
		21: "PLATFORM_ONKYO_ARM",
		22: "PLATFORM_QNXNTO_ARM",
		23: "PLATFORM_BCO_ARM",
		24: "PLATFORM_WEBPLAYER",
		25: "PLATFORM_WP8_ARM",
		26: "PLATFORM_WP8_X86",
		27: "PLATFORM_WINRT_ARM",
		28: "PLATFORM_WINRT_X86",
		29: "PLATFORM_WINRT_X86_64",
		30: "PLATFORM_FRONTIER",
		31: "PLATFORM_AMIGA_PPC",
		32: "PLATFORM_NANRADIO_NRX901",
		33: "PLATFORM_HARMAN_ARM",
		34: "PLATFORM_SONY_PS3",
		35: "PLATFORM_SONY_PS4",
		36: "PLATFORM_IPHONE_ARM64",
		37: "PLATFORM_RTEMS_PPC",
		38: "PLATFORM_GENERIC_PARTNER",
		39: "PLATFORM_WIN32_X86_64",
		40: "PLATFORM_WATCHOS",
	}
	Platform_value = map[string]int32{
		"PLATFORM_WIN32_X86":       0,
		"PLATFORM_OSX_X86":         1,
		"PLATFORM_LINUX_X86":       2,
		"PLATFORM_IPHONE_ARM":      3,
		"PLATFORM_S60_ARM":         4,
		"PLATFORM_OSX_PPC":         5,
		"PLATFORM_ANDROID_ARM":     6,
		"PLATFORM_WINDOWS_CE_ARM":  7,
		"PLATFORM_LINUX_X86_64":    8,
		"PLATFORM_OSX_X86_64":      9,
		"PLATFORM_PALM_ARM":        10,
		"PLATFORM_LINUX_SH":        11,
		"PLATFORM_FREEBSD_X86":     12,
		"PLATFORM_FREEBSD_X86_64":  13,
		"PLATFORM_BLACKBERRY_ARM":  14,
		"PLATFORM_SONOS":           15,
		"PLATFORM_LINUX_MIPS":      16,
		"PLATFORM_LINUX_ARM":       17,
		"PLATFORM_LOGITECH_ARM":    18,
		"PLATFORM_LINUX_BLACKFIN":  19,
		"PLATFORM_WP7_ARM":         20,
		"PLATFORM_ONKYO_ARM":       21,
		"PLATFORM_QNXNTO_ARM":      22,
		"PLATFORM_BCO_ARM":         23,
		"PLATFORM_WEBPLAYER":       24,
		"PLATFORM_WP8_ARM":         25,
		"PLATFORM_WP8_X86":         26,
		"PLATFORM_WINRT_ARM":       27,
		"PLATFORM_WINRT_X86":       28,
		"PLATFORM_WINRT_X86_64":    29,
		"PLATFORM_FRONTIER":        30,
		"PLATFORM_AMIGA_PPC":       31,
		"PLATFORM_NANRADIO_NRX901": 32,
		"PLATFORM_HARMAN_ARM":      33,
		"PLATFORM_SONY_PS3":        34,
		"PLATFORM_SONY_PS4":        35,
		"PLATFORM_IPHONE_ARM64":    36,
		"PLATFORM_RTEMS_PPC":       37,
		"PLATFORM_GENERIC_PARTNER": 38,
		"PLATFORM_WIN32_X86_64":    39,
		"PLATFORM_WATCHOS":         40,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_keyexchange_proto_enumTypes[2].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_keyexchange_proto_enumTypes[2]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Platform) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Platform(num)
	return nil
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{2}
}

type Fingerprint int32

const (
	Fingerprint_FINGERPRINT_GRAIN       Fingerprint = 0
	Fingerprint_FINGERPRINT_HMAC_RIPEMD Fingerprint = 1
)

// Enum value maps for Fingerprint.
var (
	Fingerprint_name = map[int32]string{
		0: "FINGERPRINT_GRAIN",
		1: "FINGERPRINT_HMAC_RIPEMD",
	}
	Fingerprint_value = map[string]int32{
		"FINGERPRINT_GRAIN":       0,
		"FINGERPRINT_HMAC_RIPEMD": 1,
	}
)

func (x Fingerprint) Enum() *Fingerprint {
	p := new(Fingerprint)
	*p = x
	return p
}

func (x Fingerprint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fingerprint) Descriptor() protoreflect.EnumDescriptor {
	return file_keyexchange_proto_enumTypes[3].Descriptor()
}

func (Fingerprint) Type() protoreflect.EnumType {
	return &file_keyexchange_proto_enumTypes[3]
}

func (x Fingerprint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Fingerprint) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Fingerprint(num)
	return nil
}

// Deprecated: Use Fingerprint.Descriptor instead.
func (Fingerprint) EnumDescriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{3}
}

type Cryptosuite int32

const (
	Cryptosuite_CRYPTO_SUITE_SHANNON       Cryptosuite = 0
	Cryptosuite_CRYPTO_SUITE_RC4_SHA1_HMAC Cryptosuite = 1
)

// Enum value maps for Cryptosuite.
var (
	Cryptosuite_name = map[int32]string{
		0: "CRYPTO_SUITE_SHANNON",
		1: "CRYPTO_SUITE_RC4_SHA1_HMAC",
	}
	Cryptosuite_value = map[string]int32{
		"CRYPTO_SUITE_SHANNON":       0,
		"CRYPTO_SUITE_RC4_SHA1_HMAC": 1,
	}
)

func (x Cryptosuite) Enum() *Cryptosuite {
	p := new(Cryptosuite)
	*p = x
	return p
}

func (x Cryptosuite) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cryptosuite) Descriptor() protoreflect.EnumDescriptor {
	return file_keyexchange_proto_enumTypes[4].Descriptor()
}

func (Cryptosuite) Type() protoreflect.EnumType {
	return &file_keyexchange_proto_enumTypes[4]
}

func (x Cryptosuite) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Cryptosuite) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Cryptosuite(num)
	return nil
}

// Deprecated: Use Cryptosuite.Descriptor instead.
func (Cryptosuite) EnumDescriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{4}
}

type Powscheme int32

const (
	Powscheme_POW_HASH_CASH Powscheme = 0
)

// Enum value maps for Powscheme.
var (
	Powscheme_name = map[int32]string{
		0: "POW_HASH_CASH",
	}
	Powscheme_value = map[string]int32{
		"POW_HASH_CASH": 0,
	}
)

func (x Powscheme) Enum() *Powscheme {
	p := new(Powscheme)
	*p = x
	return p
}

func (x Powscheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Powscheme) Descriptor() protoreflect.EnumDescriptor {
	return file_keyexchange_proto_enumTypes[5].Descriptor()
}

func (Powscheme) Type() protoreflect.EnumType {
	return &file_keyexchange_proto_enumTypes[5]
}

func (x Powscheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Powscheme) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Powscheme(num)
	return nil
}

// Deprecated: Use Powscheme.Descriptor instead.
func (Powscheme) EnumDescriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{5}
}

type ErrorCode int32

const (
	ErrorCode_ProtocolError               ErrorCode = 0
	ErrorCode_TryAnotherAP                ErrorCode = 2
	ErrorCode_BadConnectionId             ErrorCode = 5
	ErrorCode_TravelRestriction           ErrorCode = 9
	ErrorCode_PremiumAccountRequired      ErrorCode = 11
	ErrorCode_BadCredentials              ErrorCode = 12
	ErrorCode_CouldNotValidateCredentials ErrorCode = 13
	ErrorCode_AccountExists               ErrorCode = 14
	ErrorCode_ExtraVerificationRequired   ErrorCode = 15
	ErrorCode_InvalidAppKey               ErrorCode = 16
	ErrorCode_ApplicationBanned           ErrorCode = 17
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "ProtocolError",
		2:  "TryAnotherAP",
		5:  "BadConnectionId",
		9:  "TravelRestriction",
		11: "PremiumAccountRequired",
		12: "BadCredentials",
		13: "CouldNotValidateCredentials",
		14: "AccountExists",
		15: "ExtraVerificationRequired",
		16: "InvalidAppKey",
		17: "ApplicationBanned",
	}
	ErrorCode_value = map[string]int32{
		"ProtocolError":               0,
		"TryAnotherAP":                2,
		"BadConnectionId":             5,
		"TravelRestriction":           9,
		"PremiumAccountRequired":      11,
		"BadCredentials":              12,
		"CouldNotValidateCredentials": 13,
		"AccountExists":               14,
		"ExtraVerificationRequired":   15,
		"InvalidAppKey":               16,
		"ApplicationBanned":           17,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_keyexchange_proto_enumTypes[6].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_keyexchange_proto_enumTypes[6]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ErrorCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ErrorCode(num)
	return nil
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{6}
}

type ClientHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildInfo             *BuildInfo             `protobuf:"bytes,10,req,name=build_info,json=buildInfo" json:"build_info,omitempty"`
	FingerprintsSupported []Fingerprint          `protobuf:"varint,20,rep,name=fingerprints_supported,json=fingerprintsSupported,enum=spotify.Fingerprint" json:"fingerprints_supported,omitempty"`
	CryptosuitesSupported []Cryptosuite          `protobuf:"varint,30,rep,name=cryptosuites_supported,json=cryptosuitesSupported,enum=spotify.Cryptosuite" json:"cryptosuites_supported,omitempty"`
	PowschemesSupported   []Powscheme            `protobuf:"varint,40,rep,name=powschemes_supported,json=powschemesSupported,enum=spotify.Powscheme" json:"powschemes_supported,omitempty"`
	LoginCryptoHello      *LoginCryptoHelloUnion `protobuf:"bytes,50,req,name=login_crypto_hello,json=loginCryptoHello" json:"login_crypto_hello,omitempty"`
	ClientNonce           []byte                 `protobuf:"bytes,60,req,name=client_nonce,json=clientNonce" json:"client_nonce,omitempty"`
	Padding               []byte                 `protobuf:"bytes,70,opt,name=padding" json:"padding,omitempty"`
	FeatureSet            *FeatureSet            `protobuf:"bytes,80,opt,name=feature_set,json=featureSet" json:"feature_set,omitempty"`
}

func (x *ClientHello) Reset() {
	*x = ClientHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHello) ProtoMessage() {}

func (x *ClientHello) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHello.ProtoReflect.Descriptor instead.
func (*ClientHello) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{0}
}

func (x *ClientHello) GetBuildInfo() *BuildInfo {
	if x != nil {
		return x.BuildInfo
	}
	return nil
}

func (x *ClientHello) GetFingerprintsSupported() []Fingerprint {
	if x != nil {
		return x.FingerprintsSupported
	}
	return nil
}

func (x *ClientHello) GetCryptosuitesSupported() []Cryptosuite {
	if x != nil {
		return x.CryptosuitesSupported
	}
	return nil
}

func (x *ClientHello) GetPowschemesSupported() []Powscheme {
	if x != nil {
		return x.PowschemesSupported
	}
	return nil
}

func (x *ClientHello) GetLoginCryptoHello() *LoginCryptoHelloUnion {
	if x != nil {
		return x.LoginCryptoHello
	}
	return nil
}

func (x *ClientHello) GetClientNonce() []byte {
	if x != nil {
		return x.ClientNonce
	}
	return nil
}

func (x *ClientHello) GetPadding() []byte {
	if x != nil {
		return x.Padding
	}
	return nil
}

func (x *ClientHello) GetFeatureSet() *FeatureSet {
	if x != nil {
		return x.FeatureSet
	}
	return nil
}

type BuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product      *Product       `protobuf:"varint,10,req,name=product,enum=spotify.Product" json:"product,omitempty"`
	ProductFlags []ProductFlags `protobuf:"varint,20,rep,name=product_flags,json=productFlags,enum=spotify.ProductFlags" json:"product_flags,omitempty"`
	Platform     *Platform      `protobuf:"varint,30,req,name=platform,enum=spotify.Platform" json:"platform,omitempty"`
	Version      *uint64        `protobuf:"varint,40,req,name=version" json:"version,omitempty"`
}

func (x *BuildInfo) Reset() {
	*x = BuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildInfo) ProtoMessage() {}

func (x *BuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildInfo.ProtoReflect.Descriptor instead.
func (*BuildInfo) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{1}
}

func (x *BuildInfo) GetProduct() Product {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return Product_PRODUCT_CLIENT
}

func (x *BuildInfo) GetProductFlags() []ProductFlags {
	if x != nil {
		return x.ProductFlags
	}
	return nil
}

func (x *BuildInfo) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_PLATFORM_WIN32_X86
}

func (x *BuildInfo) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type LoginCryptoHelloUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiffieHellman *LoginCryptoDiffieHellmanHello `protobuf:"bytes,10,opt,name=diffie_hellman,json=diffieHellman" json:"diffie_hellman,omitempty"`
}

func (x *LoginCryptoHelloUnion) Reset() {
	*x = LoginCryptoHelloUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginCryptoHelloUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginCryptoHelloUnion) ProtoMessage() {}

func (x *LoginCryptoHelloUnion) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginCryptoHelloUnion.ProtoReflect.Descriptor instead.
func (*LoginCryptoHelloUnion) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{2}
}

func (x *LoginCryptoHelloUnion) GetDiffieHellman() *LoginCryptoDiffieHellmanHello {
	if x != nil {
		return x.DiffieHellman
	}
	return nil
}

type LoginCryptoDiffieHellmanHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gc              []byte  `protobuf:"bytes,10,req,name=gc" json:"gc,omitempty"`
	ServerKeysKnown *uint32 `protobuf:"varint,20,req,name=server_keys_known,json=serverKeysKnown" json:"server_keys_known,omitempty"`
}

func (x *LoginCryptoDiffieHellmanHello) Reset() {
	*x = LoginCryptoDiffieHellmanHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginCryptoDiffieHellmanHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginCryptoDiffieHellmanHello) ProtoMessage() {}

func (x *LoginCryptoDiffieHellmanHello) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginCryptoDiffieHellmanHello.ProtoReflect.Descriptor instead.
func (*LoginCryptoDiffieHellmanHello) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{3}
}

func (x *LoginCryptoDiffieHellmanHello) GetGc() []byte {
	if x != nil {
		return x.Gc
	}
	return nil
}

func (x *LoginCryptoDiffieHellmanHello) GetServerKeysKnown() uint32 {
	if x != nil && x.ServerKeysKnown != nil {
		return *x.ServerKeysKnown
	}
	return 0
}

type FeatureSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Autoupdate2     *bool `protobuf:"varint,1,opt,name=autoupdate2" json:"autoupdate2,omitempty"`
	CurrentLocation *bool `protobuf:"varint,2,opt,name=current_location,json=currentLocation" json:"current_location,omitempty"`
}

func (x *FeatureSet) Reset() {
	*x = FeatureSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureSet) ProtoMessage() {}

func (x *FeatureSet) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureSet.ProtoReflect.Descriptor instead.
func (*FeatureSet) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{4}
}

func (x *FeatureSet) GetAutoupdate2() bool {
	if x != nil && x.Autoupdate2 != nil {
		return *x.Autoupdate2
	}
	return false
}

func (x *FeatureSet) GetCurrentLocation() bool {
	if x != nil && x.CurrentLocation != nil {
		return *x.CurrentLocation
	}
	return false
}

type APResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge   *APChallenge            `protobuf:"bytes,10,opt,name=challenge" json:"challenge,omitempty"`
	Upgrade     *UpgradeRequiredMessage `protobuf:"bytes,20,opt,name=upgrade" json:"upgrade,omitempty"`
	LoginFailed *APLoginFailed          `protobuf:"bytes,30,opt,name=login_failed,json=loginFailed" json:"login_failed,omitempty"`
}

func (x *APResponseMessage) Reset() {
	*x = APResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APResponseMessage) ProtoMessage() {}

func (x *APResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APResponseMessage.ProtoReflect.Descriptor instead.
func (*APResponseMessage) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{5}
}

func (x *APResponseMessage) GetChallenge() *APChallenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *APResponseMessage) GetUpgrade() *UpgradeRequiredMessage {
	if x != nil {
		return x.Upgrade
	}
	return nil
}

func (x *APResponseMessage) GetLoginFailed() *APLoginFailed {
	if x != nil {
		return x.LoginFailed
	}
	return nil
}

type APChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginCryptoChallenge *LoginCryptoChallengeUnion `protobuf:"bytes,10,req,name=login_crypto_challenge,json=loginCryptoChallenge" json:"login_crypto_challenge,omitempty"`
	FingerprintChallenge *FingerprintChallengeUnion `protobuf:"bytes,20,req,name=fingerprint_challenge,json=fingerprintChallenge" json:"fingerprint_challenge,omitempty"`
	PowChallenge         *PoWChallengeUnion         `protobuf:"bytes,30,req,name=pow_challenge,json=powChallenge" json:"pow_challenge,omitempty"`
	CryptoChallenge      *CryptoChallengeUnion      `protobuf:"bytes,40,req,name=crypto_challenge,json=cryptoChallenge" json:"crypto_challenge,omitempty"`
	ServerNonce          []byte                     `protobuf:"bytes,50,req,name=server_nonce,json=serverNonce" json:"server_nonce,omitempty"`
	Padding              []byte                     `protobuf:"bytes,60,opt,name=padding" json:"padding,omitempty"`
}

func (x *APChallenge) Reset() {
	*x = APChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APChallenge) ProtoMessage() {}

func (x *APChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APChallenge.ProtoReflect.Descriptor instead.
func (*APChallenge) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{6}
}

func (x *APChallenge) GetLoginCryptoChallenge() *LoginCryptoChallengeUnion {
	if x != nil {
		return x.LoginCryptoChallenge
	}
	return nil
}

func (x *APChallenge) GetFingerprintChallenge() *FingerprintChallengeUnion {
	if x != nil {
		return x.FingerprintChallenge
	}
	return nil
}

func (x *APChallenge) GetPowChallenge() *PoWChallengeUnion {
	if x != nil {
		return x.PowChallenge
	}
	return nil
}

func (x *APChallenge) GetCryptoChallenge() *CryptoChallengeUnion {
	if x != nil {
		return x.CryptoChallenge
	}
	return nil
}

func (x *APChallenge) GetServerNonce() []byte {
	if x != nil {
		return x.ServerNonce
	}
	return nil
}

func (x *APChallenge) GetPadding() []byte {
	if x != nil {
		return x.Padding
	}
	return nil
}

type LoginCryptoChallengeUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiffieHellman *LoginCryptoDiffieHellmanChallenge `protobuf:"bytes,10,opt,name=diffie_hellman,json=diffieHellman" json:"diffie_hellman,omitempty"`
}

func (x *LoginCryptoChallengeUnion) Reset() {
	*x = LoginCryptoChallengeUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginCryptoChallengeUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginCryptoChallengeUnion) ProtoMessage() {}

func (x *LoginCryptoChallengeUnion) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginCryptoChallengeUnion.ProtoReflect.Descriptor instead.
func (*LoginCryptoChallengeUnion) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{7}
}

func (x *LoginCryptoChallengeUnion) GetDiffieHellman() *LoginCryptoDiffieHellmanChallenge {
	if x != nil {
		return x.DiffieHellman
	}
	return nil
}

type LoginCryptoDiffieHellmanChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gs                 []byte `protobuf:"bytes,10,req,name=gs" json:"gs,omitempty"`
	ServerSignatureKey *int32 `protobuf:"varint,20,req,name=server_signature_key,json=serverSignatureKey" json:"server_signature_key,omitempty"`
	GsSignature        []byte `protobuf:"bytes,30,req,name=gs_signature,json=gsSignature" json:"gs_signature,omitempty"`
}

func (x *LoginCryptoDiffieHellmanChallenge) Reset() {
	*x = LoginCryptoDiffieHellmanChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginCryptoDiffieHellmanChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginCryptoDiffieHellmanChallenge) ProtoMessage() {}

func (x *LoginCryptoDiffieHellmanChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginCryptoDiffieHellmanChallenge.ProtoReflect.Descriptor instead.
func (*LoginCryptoDiffieHellmanChallenge) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{8}
}

func (x *LoginCryptoDiffieHellmanChallenge) GetGs() []byte {
	if x != nil {
		return x.Gs
	}
	return nil
}

func (x *LoginCryptoDiffieHellmanChallenge) GetServerSignatureKey() int32 {
	if x != nil && x.ServerSignatureKey != nil {
		return *x.ServerSignatureKey
	}
	return 0
}

func (x *LoginCryptoDiffieHellmanChallenge) GetGsSignature() []byte {
	if x != nil {
		return x.GsSignature
	}
	return nil
}

type FingerprintChallengeUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grain      *FingerprintGrainChallenge      `protobuf:"bytes,10,opt,name=grain" json:"grain,omitempty"`
	HmacRipemd *FingerprintHmacRipemdChallenge `protobuf:"bytes,20,opt,name=hmac_ripemd,json=hmacRipemd" json:"hmac_ripemd,omitempty"`
}

func (x *FingerprintChallengeUnion) Reset() {
	*x = FingerprintChallengeUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FingerprintChallengeUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintChallengeUnion) ProtoMessage() {}

func (x *FingerprintChallengeUnion) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintChallengeUnion.ProtoReflect.Descriptor instead.
func (*FingerprintChallengeUnion) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{9}
}

func (x *FingerprintChallengeUnion) GetGrain() *FingerprintGrainChallenge {
	if x != nil {
		return x.Grain
	}
	return nil
}

func (x *FingerprintChallengeUnion) GetHmacRipemd() *FingerprintHmacRipemdChallenge {
	if x != nil {
		return x.HmacRipemd
	}
	return nil
}

type FingerprintGrainChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kek []byte `protobuf:"bytes,10,req,name=kek" json:"kek,omitempty"`
}

func (x *FingerprintGrainChallenge) Reset() {
	*x = FingerprintGrainChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FingerprintGrainChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintGrainChallenge) ProtoMessage() {}

func (x *FingerprintGrainChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintGrainChallenge.ProtoReflect.Descriptor instead.
func (*FingerprintGrainChallenge) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{10}
}

func (x *FingerprintGrainChallenge) GetKek() []byte {
	if x != nil {
		return x.Kek
	}
	return nil
}

type FingerprintHmacRipemdChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge []byte `protobuf:"bytes,10,req,name=challenge" json:"challenge,omitempty"`
}

func (x *FingerprintHmacRipemdChallenge) Reset() {
	*x = FingerprintHmacRipemdChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FingerprintHmacRipemdChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintHmacRipemdChallenge) ProtoMessage() {}

func (x *FingerprintHmacRipemdChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintHmacRipemdChallenge.ProtoReflect.Descriptor instead.
func (*FingerprintHmacRipemdChallenge) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{11}
}

func (x *FingerprintHmacRipemdChallenge) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type PoWChallengeUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashCash *PoWHashCashChallenge `protobuf:"bytes,10,opt,name=hash_cash,json=hashCash" json:"hash_cash,omitempty"`
}

func (x *PoWChallengeUnion) Reset() {
	*x = PoWChallengeUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoWChallengeUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoWChallengeUnion) ProtoMessage() {}

func (x *PoWChallengeUnion) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoWChallengeUnion.ProtoReflect.Descriptor instead.
func (*PoWChallengeUnion) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{12}
}

func (x *PoWChallengeUnion) GetHashCash() *PoWHashCashChallenge {
	if x != nil {
		return x.HashCash
	}
	return nil
}

type PoWHashCashChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix []byte `protobuf:"bytes,10,opt,name=prefix" json:"prefix,omitempty"`
	Length *int32 `protobuf:"varint,20,opt,name=length" json:"length,omitempty"`
	Target *int32 `protobuf:"varint,30,opt,name=target" json:"target,omitempty"`
}

func (x *PoWHashCashChallenge) Reset() {
	*x = PoWHashCashChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoWHashCashChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoWHashCashChallenge) ProtoMessage() {}

func (x *PoWHashCashChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoWHashCashChallenge.ProtoReflect.Descriptor instead.
func (*PoWHashCashChallenge) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{13}
}

func (x *PoWHashCashChallenge) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *PoWHashCashChallenge) GetLength() int32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *PoWHashCashChallenge) GetTarget() int32 {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return 0
}

type CryptoChallengeUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shannon     *CryptoShannonChallenge     `protobuf:"bytes,10,opt,name=shannon" json:"shannon,omitempty"`
	Rc4Sha1Hmac *CryptoRc4Sha1HmacChallenge `protobuf:"bytes,20,opt,name=rc4_sha1_hmac,json=rc4Sha1Hmac" json:"rc4_sha1_hmac,omitempty"`
}

func (x *CryptoChallengeUnion) Reset() {
	*x = CryptoChallengeUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoChallengeUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoChallengeUnion) ProtoMessage() {}

func (x *CryptoChallengeUnion) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoChallengeUnion.ProtoReflect.Descriptor instead.
func (*CryptoChallengeUnion) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{14}
}

func (x *CryptoChallengeUnion) GetShannon() *CryptoShannonChallenge {
	if x != nil {
		return x.Shannon
	}
	return nil
}

func (x *CryptoChallengeUnion) GetRc4Sha1Hmac() *CryptoRc4Sha1HmacChallenge {
	if x != nil {
		return x.Rc4Sha1Hmac
	}
	return nil
}

type CryptoShannonChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CryptoShannonChallenge) Reset() {
	*x = CryptoShannonChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoShannonChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoShannonChallenge) ProtoMessage() {}

func (x *CryptoShannonChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoShannonChallenge.ProtoReflect.Descriptor instead.
func (*CryptoShannonChallenge) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{15}
}

type CryptoRc4Sha1HmacChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CryptoRc4Sha1HmacChallenge) Reset() {
	*x = CryptoRc4Sha1HmacChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoRc4Sha1HmacChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoRc4Sha1HmacChallenge) ProtoMessage() {}

func (x *CryptoRc4Sha1HmacChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoRc4Sha1HmacChallenge.ProtoReflect.Descriptor instead.
func (*CryptoRc4Sha1HmacChallenge) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{16}
}

type UpgradeRequiredMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeSignedPart []byte  `protobuf:"bytes,10,req,name=upgrade_signed_part,json=upgradeSignedPart" json:"upgrade_signed_part,omitempty"`
	Signature         []byte  `protobuf:"bytes,20,req,name=signature" json:"signature,omitempty"`
	HttpSuffix        *string `protobuf:"bytes,30,opt,name=http_suffix,json=httpSuffix" json:"http_suffix,omitempty"`
}

func (x *UpgradeRequiredMessage) Reset() {
	*x = UpgradeRequiredMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeRequiredMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeRequiredMessage) ProtoMessage() {}

func (x *UpgradeRequiredMessage) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeRequiredMessage.ProtoReflect.Descriptor instead.
func (*UpgradeRequiredMessage) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{17}
}

func (x *UpgradeRequiredMessage) GetUpgradeSignedPart() []byte {
	if x != nil {
		return x.UpgradeSignedPart
	}
	return nil
}

func (x *UpgradeRequiredMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *UpgradeRequiredMessage) GetHttpSuffix() string {
	if x != nil && x.HttpSuffix != nil {
		return *x.HttpSuffix
	}
	return ""
}

type APLoginFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode        *ErrorCode `protobuf:"varint,10,req,name=error_code,json=errorCode,enum=spotify.ErrorCode" json:"error_code,omitempty"`
	RetryDelay       *int32     `protobuf:"varint,20,opt,name=retry_delay,json=retryDelay" json:"retry_delay,omitempty"`
	Expiry           *int32     `protobuf:"varint,30,opt,name=expiry" json:"expiry,omitempty"`
	ErrorDescription *string    `protobuf:"bytes,40,opt,name=error_description,json=errorDescription" json:"error_description,omitempty"`
}

func (x *APLoginFailed) Reset() {
	*x = APLoginFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APLoginFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APLoginFailed) ProtoMessage() {}

func (x *APLoginFailed) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APLoginFailed.ProtoReflect.Descriptor instead.
func (*APLoginFailed) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{18}
}

func (x *APLoginFailed) GetErrorCode() ErrorCode {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return ErrorCode_ProtocolError
}

func (x *APLoginFailed) GetRetryDelay() int32 {
	if x != nil && x.RetryDelay != nil {
		return *x.RetryDelay
	}
	return 0
}

func (x *APLoginFailed) GetExpiry() int32 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *APLoginFailed) GetErrorDescription() string {
	if x != nil && x.ErrorDescription != nil {
		return *x.ErrorDescription
	}
	return ""
}

type ClientResponsePlaintext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginCryptoResponse *LoginCryptoResponseUnion `protobuf:"bytes,10,req,name=login_crypto_response,json=loginCryptoResponse" json:"login_crypto_response,omitempty"`
	PowResponse         *PoWResponseUnion         `protobuf:"bytes,20,req,name=pow_response,json=powResponse" json:"pow_response,omitempty"`
	CryptoResponse      *CryptoResponseUnion      `protobuf:"bytes,30,req,name=crypto_response,json=cryptoResponse" json:"crypto_response,omitempty"`
}

func (x *ClientResponsePlaintext) Reset() {
	*x = ClientResponsePlaintext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientResponsePlaintext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientResponsePlaintext) ProtoMessage() {}

func (x *ClientResponsePlaintext) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientResponsePlaintext.ProtoReflect.Descriptor instead.
func (*ClientResponsePlaintext) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{19}
}

func (x *ClientResponsePlaintext) GetLoginCryptoResponse() *LoginCryptoResponseUnion {
	if x != nil {
		return x.LoginCryptoResponse
	}
	return nil
}

func (x *ClientResponsePlaintext) GetPowResponse() *PoWResponseUnion {
	if x != nil {
		return x.PowResponse
	}
	return nil
}

func (x *ClientResponsePlaintext) GetCryptoResponse() *CryptoResponseUnion {
	if x != nil {
		return x.CryptoResponse
	}
	return nil
}

type LoginCryptoResponseUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiffieHellman *LoginCryptoDiffieHellmanResponse `protobuf:"bytes,10,opt,name=diffie_hellman,json=diffieHellman" json:"diffie_hellman,omitempty"`
}

func (x *LoginCryptoResponseUnion) Reset() {
	*x = LoginCryptoResponseUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginCryptoResponseUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginCryptoResponseUnion) ProtoMessage() {}

func (x *LoginCryptoResponseUnion) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginCryptoResponseUnion.ProtoReflect.Descriptor instead.
func (*LoginCryptoResponseUnion) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{20}
}

func (x *LoginCryptoResponseUnion) GetDiffieHellman() *LoginCryptoDiffieHellmanResponse {
	if x != nil {
		return x.DiffieHellman
	}
	return nil
}

type LoginCryptoDiffieHellmanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hmac []byte `protobuf:"bytes,10,req,name=hmac" json:"hmac,omitempty"`
}

func (x *LoginCryptoDiffieHellmanResponse) Reset() {
	*x = LoginCryptoDiffieHellmanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginCryptoDiffieHellmanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginCryptoDiffieHellmanResponse) ProtoMessage() {}

func (x *LoginCryptoDiffieHellmanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginCryptoDiffieHellmanResponse.ProtoReflect.Descriptor instead.
func (*LoginCryptoDiffieHellmanResponse) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{21}
}

func (x *LoginCryptoDiffieHellmanResponse) GetHmac() []byte {
	if x != nil {
		return x.Hmac
	}
	return nil
}

type PoWResponseUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashCash *PoWHashCashResponse `protobuf:"bytes,10,opt,name=hash_cash,json=hashCash" json:"hash_cash,omitempty"`
}

func (x *PoWResponseUnion) Reset() {
	*x = PoWResponseUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoWResponseUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoWResponseUnion) ProtoMessage() {}

func (x *PoWResponseUnion) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoWResponseUnion.ProtoReflect.Descriptor instead.
func (*PoWResponseUnion) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{22}
}

func (x *PoWResponseUnion) GetHashCash() *PoWHashCashResponse {
	if x != nil {
		return x.HashCash
	}
	return nil
}

type PoWHashCashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashSuffix []byte `protobuf:"bytes,10,req,name=hash_suffix,json=hashSuffix" json:"hash_suffix,omitempty"`
}

func (x *PoWHashCashResponse) Reset() {
	*x = PoWHashCashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoWHashCashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoWHashCashResponse) ProtoMessage() {}

func (x *PoWHashCashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoWHashCashResponse.ProtoReflect.Descriptor instead.
func (*PoWHashCashResponse) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{23}
}

func (x *PoWHashCashResponse) GetHashSuffix() []byte {
	if x != nil {
		return x.HashSuffix
	}
	return nil
}

type CryptoResponseUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shannon     *CryptoShannonResponse     `protobuf:"bytes,10,opt,name=shannon" json:"shannon,omitempty"`
	Rc4Sha1Hmac *CryptoRc4Sha1HmacResponse `protobuf:"bytes,20,opt,name=rc4_sha1_hmac,json=rc4Sha1Hmac" json:"rc4_sha1_hmac,omitempty"`
}

func (x *CryptoResponseUnion) Reset() {
	*x = CryptoResponseUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoResponseUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoResponseUnion) ProtoMessage() {}

func (x *CryptoResponseUnion) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoResponseUnion.ProtoReflect.Descriptor instead.
func (*CryptoResponseUnion) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{24}
}

func (x *CryptoResponseUnion) GetShannon() *CryptoShannonResponse {
	if x != nil {
		return x.Shannon
	}
	return nil
}

func (x *CryptoResponseUnion) GetRc4Sha1Hmac() *CryptoRc4Sha1HmacResponse {
	if x != nil {
		return x.Rc4Sha1Hmac
	}
	return nil
}

type CryptoShannonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy *int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy,omitempty"`
}

func (x *CryptoShannonResponse) Reset() {
	*x = CryptoShannonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoShannonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoShannonResponse) ProtoMessage() {}

func (x *CryptoShannonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoShannonResponse.ProtoReflect.Descriptor instead.
func (*CryptoShannonResponse) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{25}
}

func (x *CryptoShannonResponse) GetDummy() int32 {
	if x != nil && x.Dummy != nil {
		return *x.Dummy
	}
	return 0
}

type CryptoRc4Sha1HmacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy *int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy,omitempty"`
}

func (x *CryptoRc4Sha1HmacResponse) Reset() {
	*x = CryptoRc4Sha1HmacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyexchange_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoRc4Sha1HmacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoRc4Sha1HmacResponse) ProtoMessage() {}

func (x *CryptoRc4Sha1HmacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keyexchange_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoRc4Sha1HmacResponse.ProtoReflect.Descriptor instead.
func (*CryptoRc4Sha1HmacResponse) Descriptor() ([]byte, []int) {
	return file_keyexchange_proto_rawDescGZIP(), []int{26}
}

func (x *CryptoRc4Sha1HmacResponse) GetDummy() int32 {
	if x != nil && x.Dummy != nil {
		return *x.Dummy
	}
	return 0
}

var File_keyexchange_proto protoreflect.FileDescriptor

var file_keyexchange_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6b, 0x65, 0x79, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0xe2, 0x03, 0x0a,
	0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x31, 0x0a, 0x0a,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4b, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x15, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x16,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x73, 0x75, 0x69,
	0x74, 0x65, 0x52, 0x15, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x14, 0x70, 0x6f, 0x77,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x50, 0x6f, 0x77, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x13, 0x70, 0x6f, 0x77,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x4c, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x32, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x3c,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x74, 0x22, 0xbc, 0x01, 0x0a, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x1e, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x70, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x28, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x66, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0e, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x69, 0x66, 0x66, 0x69, 0x65, 0x48, 0x65, 0x6c,
	0x6c, 0x6d, 0x61, 0x6e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x65, 0x48, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x22, 0x5b, 0x0a, 0x1d, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x69, 0x66, 0x66, 0x69, 0x65, 0x48, 0x65, 0x6c,
	0x6c, 0x6d, 0x61, 0x6e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x63, 0x18,
	0x0a, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x02, 0x67, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x14,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0x59, 0x0a, 0x0a, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x32, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xbd, 0x01, 0x0a, 0x11, 0x41, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x41, 0x50, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x41, 0x50, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x22, 0x88, 0x03, 0x0a, 0x0b, 0x41, 0x50, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x58, 0x0a, 0x16, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x15, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x18, 0x14, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6f, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x50, 0x6f, 0x57, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x28, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x32,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x6e, 0x0a, 0x19, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0e, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x69, 0x66, 0x66, 0x69, 0x65, 0x48, 0x65, 0x6c, 0x6c,
	0x6d, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x65, 0x48, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x21,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x65, 0x48, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x02, 0x67,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x1e, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0b, 0x67, 0x73, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x48,
	0x0a, 0x0b, 0x68, 0x6d, 0x61, 0x63, 0x5f, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x48, 0x6d, 0x61, 0x63, 0x52, 0x69, 0x70,
	0x65, 0x6d, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x68, 0x6d,
	0x61, 0x63, 0x52, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x6b, 0x18, 0x0a, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x6b, 0x22, 0x3e, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x48, 0x6d, 0x61, 0x63, 0x52, 0x69, 0x70, 0x65, 0x6d, 0x64,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x11, 0x50, 0x6f, 0x57, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x50, 0x6f, 0x57, 0x48, 0x61, 0x73,
	0x68, 0x43, 0x61, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x43, 0x61, 0x73, 0x68, 0x22, 0x5e, 0x0a, 0x14, 0x50, 0x6f, 0x57, 0x48,
	0x61, 0x73, 0x68, 0x43, 0x61, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x53, 0x68, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x07, 0x73, 0x68, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d,
	0x72, 0x63, 0x34, 0x5f, 0x73, 0x68, 0x61, 0x31, 0x5f, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x52, 0x63, 0x34, 0x53, 0x68, 0x61, 0x31, 0x48, 0x6d, 0x61, 0x63, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x72, 0x63, 0x34, 0x53, 0x68, 0x61,
	0x31, 0x48, 0x6d, 0x61, 0x63, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53,
	0x68, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22,
	0x1c, 0x0a, 0x1a, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x63, 0x34, 0x53, 0x68, 0x61, 0x31,
	0x48, 0x6d, 0x61, 0x63, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x87, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x74, 0x74,
	0x70, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x41, 0x50, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xf5, 0x01, 0x0a, 0x17, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x55,
	0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x14, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x50, 0x6f, 0x57, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x1e, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x18, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0e, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65,
	0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x44, 0x69, 0x66, 0x66, 0x69, 0x65, 0x48, 0x65, 0x6c, 0x6c, 0x6d, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x65, 0x48, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x22, 0x36, 0x0a, 0x20, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x69, 0x66, 0x66, 0x69, 0x65, 0x48, 0x65, 0x6c,
	0x6c, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6d, 0x61, 0x63, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x6d, 0x61, 0x63,
	0x22, 0x4d, 0x0a, 0x10, 0x50, 0x6f, 0x57, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x73,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x50, 0x6f, 0x57, 0x48, 0x61, 0x73, 0x68, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x61, 0x73, 0x68, 0x22,
	0x36, 0x0a, 0x13, 0x50, 0x6f, 0x57, 0x48, 0x61, 0x73, 0x68, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x68, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x53, 0x68, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x73, 0x68, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x63, 0x34,
	0x5f, 0x73, 0x68, 0x61, 0x31, 0x5f, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x52, 0x63, 0x34, 0x53, 0x68, 0x61, 0x31, 0x48, 0x6d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x72, 0x63, 0x34, 0x53, 0x68, 0x61, 0x31, 0x48, 0x6d, 0x61,
	0x63, 0x22, 0x2d, 0x0a, 0x15, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x68, 0x61, 0x6e, 0x6e,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75,
	0x6d, 0x6d, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x22, 0x31, 0x0a, 0x19, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x63, 0x34, 0x53, 0x68, 0x61,
	0x31, 0x48, 0x6d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x75,
	0x6d, 0x6d, 0x79, 0x2a, 0x7f, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4c, 0x49,
	0x42, 0x53, 0x50, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4c,
	0x49, 0x42, 0x53, 0x50, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44,
	0x45, 0x44, 0x10, 0x05, 0x2a, 0x41, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x44, 0x45, 0x56, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x01, 0x2a, 0x81, 0x08, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x57, 0x49, 0x4e, 0x33, 0x32, 0x5f, 0x58, 0x38, 0x36, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x53, 0x58, 0x5f, 0x58, 0x38, 0x36,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4c,
	0x49, 0x4e, 0x55, 0x58, 0x5f, 0x58, 0x38, 0x36, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x49, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x41, 0x52,
	0x4d, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x53, 0x36, 0x30, 0x5f, 0x41, 0x52, 0x4d, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x53, 0x58, 0x5f, 0x50, 0x50, 0x43, 0x10, 0x05, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x4e, 0x44, 0x52,
	0x4f, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x4d, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x43, 0x45,
	0x5f, 0x41, 0x52, 0x4d, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x58, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x10,
	0x08, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x53,
	0x58, 0x5f, 0x58, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x50, 0x41, 0x4c, 0x4d, 0x5f, 0x41, 0x52, 0x4d, 0x10,
	0x0a, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x49,
	0x4e, 0x55, 0x58, 0x5f, 0x53, 0x48, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x42, 0x53, 0x44, 0x5f, 0x58, 0x38, 0x36,
	0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46,
	0x52, 0x45, 0x45, 0x42, 0x53, 0x44, 0x5f, 0x58, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x10, 0x0d, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x42, 0x45, 0x52, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x4d, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x4f, 0x4e, 0x4f, 0x53, 0x10, 0x0f,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x49, 0x4e,
	0x55, 0x58, 0x5f, 0x4d, 0x49, 0x50, 0x53, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x41, 0x52, 0x4d, 0x10,
	0x11, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x4f,
	0x47, 0x49, 0x54, 0x45, 0x43, 0x48, 0x5f, 0x41, 0x52, 0x4d, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4e, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x57, 0x50, 0x37, 0x5f, 0x41, 0x52, 0x4d, 0x10, 0x14, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x4e, 0x4b, 0x59,
	0x4f, 0x5f, 0x41, 0x52, 0x4d, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x51, 0x4e, 0x58, 0x4e, 0x54, 0x4f, 0x5f, 0x41, 0x52, 0x4d, 0x10, 0x16,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x42, 0x43, 0x4f,
	0x5f, 0x41, 0x52, 0x4d, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x57, 0x45, 0x42, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x18, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x57, 0x50, 0x38, 0x5f, 0x41,
	0x52, 0x4d, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x57, 0x50, 0x38, 0x5f, 0x58, 0x38, 0x36, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x52, 0x54, 0x5f, 0x41, 0x52, 0x4d,
	0x10, 0x1b, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x57,
	0x49, 0x4e, 0x52, 0x54, 0x5f, 0x58, 0x38, 0x36, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x52, 0x54, 0x5f, 0x58, 0x38, 0x36,
	0x5f, 0x36, 0x34, 0x10, 0x1d, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x49, 0x45, 0x52, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x4d, 0x49, 0x47, 0x41, 0x5f, 0x50,
	0x50, 0x43, 0x10, 0x1f, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x4e, 0x41, 0x4e, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x52, 0x58, 0x39, 0x30, 0x31,
	0x10, 0x20, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x48,
	0x41, 0x52, 0x4d, 0x41, 0x4e, 0x5f, 0x41, 0x52, 0x4d, 0x10, 0x21, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x4f, 0x4e, 0x59, 0x5f, 0x50, 0x53, 0x33,
	0x10, 0x22, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53,
	0x4f, 0x4e, 0x59, 0x5f, 0x50, 0x53, 0x34, 0x10, 0x23, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x49, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x41, 0x52, 0x4d,
	0x36, 0x34, 0x10, 0x24, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x52, 0x54, 0x45, 0x4d, 0x53, 0x5f, 0x50, 0x50, 0x43, 0x10, 0x25, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x10, 0x26, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x33, 0x32, 0x5f, 0x58, 0x38, 0x36,
	0x5f, 0x36, 0x34, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x4f, 0x53, 0x10, 0x28, 0x2a, 0x41, 0x0a, 0x0b, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49,
	0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54,
	0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x52, 0x49, 0x50, 0x45, 0x4d, 0x44, 0x10, 0x01, 0x2a, 0x47,
	0x0a, 0x0b, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x48,
	0x41, 0x4e, 0x4e, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x4f, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x53, 0x48, 0x41, 0x31,
	0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x01, 0x2a, 0x1e, 0x0a, 0x09, 0x50, 0x6f, 0x77, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x57, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x5f, 0x43, 0x41, 0x53, 0x48, 0x10, 0x00, 0x2a, 0x89, 0x02, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x72, 0x79, 0x41,
	0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x50, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x10, 0x05, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x61, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x6f, 0x75, 0x6c, 0x64, 0x4e,
	0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x10, 0x11, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x65, 0x76, 0x67, 0x69, 0x61, 0x6e, 0x6c, 0x75, 0x2f, 0x67, 0x6f, 0x2d, 0x6c,
	0x69, 0x62, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f,
}

var (
	file_keyexchange_proto_rawDescOnce sync.Once
	file_keyexchange_proto_rawDescData = file_keyexchange_proto_rawDesc
)

func file_keyexchange_proto_rawDescGZIP() []byte {
	file_keyexchange_proto_rawDescOnce.Do(func() {
		file_keyexchange_proto_rawDescData = protoimpl.X.CompressGZIP(file_keyexchange_proto_rawDescData)
	})
	return file_keyexchange_proto_rawDescData
}

var file_keyexchange_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_keyexchange_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_keyexchange_proto_goTypes = []interface{}{
	(Product)(0),                              // 0: spotify.Product
	(ProductFlags)(0),                         // 1: spotify.ProductFlags
	(Platform)(0),                             // 2: spotify.Platform
	(Fingerprint)(0),                          // 3: spotify.Fingerprint
	(Cryptosuite)(0),                          // 4: spotify.Cryptosuite
	(Powscheme)(0),                            // 5: spotify.Powscheme
	(ErrorCode)(0),                            // 6: spotify.ErrorCode
	(*ClientHello)(nil),                       // 7: spotify.ClientHello
	(*BuildInfo)(nil),                         // 8: spotify.BuildInfo
	(*LoginCryptoHelloUnion)(nil),             // 9: spotify.LoginCryptoHelloUnion
	(*LoginCryptoDiffieHellmanHello)(nil),     // 10: spotify.LoginCryptoDiffieHellmanHello
	(*FeatureSet)(nil),                        // 11: spotify.FeatureSet
	(*APResponseMessage)(nil),                 // 12: spotify.APResponseMessage
	(*APChallenge)(nil),                       // 13: spotify.APChallenge
	(*LoginCryptoChallengeUnion)(nil),         // 14: spotify.LoginCryptoChallengeUnion
	(*LoginCryptoDiffieHellmanChallenge)(nil), // 15: spotify.LoginCryptoDiffieHellmanChallenge
	(*FingerprintChallengeUnion)(nil),         // 16: spotify.FingerprintChallengeUnion
	(*FingerprintGrainChallenge)(nil),         // 17: spotify.FingerprintGrainChallenge
	(*FingerprintHmacRipemdChallenge)(nil),    // 18: spotify.FingerprintHmacRipemdChallenge
	(*PoWChallengeUnion)(nil),                 // 19: spotify.PoWChallengeUnion
	(*PoWHashCashChallenge)(nil),              // 20: spotify.PoWHashCashChallenge
	(*CryptoChallengeUnion)(nil),              // 21: spotify.CryptoChallengeUnion
	(*CryptoShannonChallenge)(nil),            // 22: spotify.CryptoShannonChallenge
	(*CryptoRc4Sha1HmacChallenge)(nil),        // 23: spotify.CryptoRc4Sha1HmacChallenge
	(*UpgradeRequiredMessage)(nil),            // 24: spotify.UpgradeRequiredMessage
	(*APLoginFailed)(nil),                     // 25: spotify.APLoginFailed
	(*ClientResponsePlaintext)(nil),           // 26: spotify.ClientResponsePlaintext
	(*LoginCryptoResponseUnion)(nil),          // 27: spotify.LoginCryptoResponseUnion
	(*LoginCryptoDiffieHellmanResponse)(nil),  // 28: spotify.LoginCryptoDiffieHellmanResponse
	(*PoWResponseUnion)(nil),                  // 29: spotify.PoWResponseUnion
	(*PoWHashCashResponse)(nil),               // 30: spotify.PoWHashCashResponse
	(*CryptoResponseUnion)(nil),               // 31: spotify.CryptoResponseUnion
	(*CryptoShannonResponse)(nil),             // 32: spotify.CryptoShannonResponse
	(*CryptoRc4Sha1HmacResponse)(nil),         // 33: spotify.CryptoRc4Sha1HmacResponse
}
var file_keyexchange_proto_depIdxs = []int32{
	8,  // 0: spotify.ClientHello.build_info:type_name -> spotify.BuildInfo
	3,  // 1: spotify.ClientHello.fingerprints_supported:type_name -> spotify.Fingerprint
	4,  // 2: spotify.ClientHello.cryptosuites_supported:type_name -> spotify.Cryptosuite
	5,  // 3: spotify.ClientHello.powschemes_supported:type_name -> spotify.Powscheme
	9,  // 4: spotify.ClientHello.login_crypto_hello:type_name -> spotify.LoginCryptoHelloUnion
	11, // 5: spotify.ClientHello.feature_set:type_name -> spotify.FeatureSet
	0,  // 6: spotify.BuildInfo.product:type_name -> spotify.Product
	1,  // 7: spotify.BuildInfo.product_flags:type_name -> spotify.ProductFlags
	2,  // 8: spotify.BuildInfo.platform:type_name -> spotify.Platform
	10, // 9: spotify.LoginCryptoHelloUnion.diffie_hellman:type_name -> spotify.LoginCryptoDiffieHellmanHello
	13, // 10: spotify.APResponseMessage.challenge:type_name -> spotify.APChallenge
	24, // 11: spotify.APResponseMessage.upgrade:type_name -> spotify.UpgradeRequiredMessage
	25, // 12: spotify.APResponseMessage.login_failed:type_name -> spotify.APLoginFailed
	14, // 13: spotify.APChallenge.login_crypto_challenge:type_name -> spotify.LoginCryptoChallengeUnion
	16, // 14: spotify.APChallenge.fingerprint_challenge:type_name -> spotify.FingerprintChallengeUnion
	19, // 15: spotify.APChallenge.pow_challenge:type_name -> spotify.PoWChallengeUnion
	21, // 16: spotify.APChallenge.crypto_challenge:type_name -> spotify.CryptoChallengeUnion
	15, // 17: spotify.LoginCryptoChallengeUnion.diffie_hellman:type_name -> spotify.LoginCryptoDiffieHellmanChallenge
	17, // 18: spotify.FingerprintChallengeUnion.grain:type_name -> spotify.FingerprintGrainChallenge
	18, // 19: spotify.FingerprintChallengeUnion.hmac_ripemd:type_name -> spotify.FingerprintHmacRipemdChallenge
	20, // 20: spotify.PoWChallengeUnion.hash_cash:type_name -> spotify.PoWHashCashChallenge
	22, // 21: spotify.CryptoChallengeUnion.shannon:type_name -> spotify.CryptoShannonChallenge
	23, // 22: spotify.CryptoChallengeUnion.rc4_sha1_hmac:type_name -> spotify.CryptoRc4Sha1HmacChallenge
	6,  // 23: spotify.APLoginFailed.error_code:type_name -> spotify.ErrorCode
	27, // 24: spotify.ClientResponsePlaintext.login_crypto_response:type_name -> spotify.LoginCryptoResponseUnion
	29, // 25: spotify.ClientResponsePlaintext.pow_response:type_name -> spotify.PoWResponseUnion
	31, // 26: spotify.ClientResponsePlaintext.crypto_response:type_name -> spotify.CryptoResponseUnion
	28, // 27: spotify.LoginCryptoResponseUnion.diffie_hellman:type_name -> spotify.LoginCryptoDiffieHellmanResponse
	30, // 28: spotify.PoWResponseUnion.hash_cash:type_name -> spotify.PoWHashCashResponse
	32, // 29: spotify.CryptoResponseUnion.shannon:type_name -> spotify.CryptoShannonResponse
	33, // 30: spotify.CryptoResponseUnion.rc4_sha1_hmac:type_name -> spotify.CryptoRc4Sha1HmacResponse
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_keyexchange_proto_init() }
func file_keyexchange_proto_init() {
	if File_keyexchange_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_keyexchange_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginCryptoHelloUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginCryptoDiffieHellmanHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginCryptoChallengeUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginCryptoDiffieHellmanChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FingerprintChallengeUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FingerprintGrainChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FingerprintHmacRipemdChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoWChallengeUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoWHashCashChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoChallengeUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoShannonChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoRc4Sha1HmacChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeRequiredMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APLoginFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientResponsePlaintext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginCryptoResponseUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginCryptoDiffieHellmanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoWResponseUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoWHashCashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoResponseUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoShannonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyexchange_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoRc4Sha1HmacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_keyexchange_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_keyexchange_proto_goTypes,
		DependencyIndexes: file_keyexchange_proto_depIdxs,
		EnumInfos:         file_keyexchange_proto_enumTypes,
		MessageInfos:      file_keyexchange_proto_msgTypes,
	}.Build()
	File_keyexchange_proto = out.File
	file_keyexchange_proto_rawDesc = nil
	file_keyexchange_proto_goTypes = nil
	file_keyexchange_proto_depIdxs = nil
}
