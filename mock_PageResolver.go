// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

//go:build test_unit || test_integration

package go_librespot

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockPageResolver creates a new instance of MockPageResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPageResolver[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPageResolver[T] {
	mock := &MockPageResolver[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPageResolver is an autogenerated mock type for the PageResolver type
type MockPageResolver[T any] struct {
	mock.Mock
}

type MockPageResolver_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockPageResolver[T]) EXPECT() *MockPageResolver_Expecter[T] {
	return &MockPageResolver_Expecter[T]{mock: &_m.Mock}
}

// Page provides a mock function for the type MockPageResolver
func (_mock *MockPageResolver[T]) Page(ctx context.Context, idx int) ([]T, error) {
	ret := _mock.Called(ctx, idx)

	if len(ret) == 0 {
		panic("no return value specified for Page")
	}

	var r0 []T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]T, error)); ok {
		return returnFunc(ctx, idx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []T); ok {
		r0 = returnFunc(ctx, idx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, idx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPageResolver_Page_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Page'
type MockPageResolver_Page_Call[T any] struct {
	*mock.Call
}

// Page is a helper method to define mock.On call
//   - ctx context.Context
//   - idx int
func (_e *MockPageResolver_Expecter[T]) Page(ctx interface{}, idx interface{}) *MockPageResolver_Page_Call[T] {
	return &MockPageResolver_Page_Call[T]{Call: _e.mock.On("Page", ctx, idx)}
}

func (_c *MockPageResolver_Page_Call[T]) Run(run func(ctx context.Context, idx int)) *MockPageResolver_Page_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPageResolver_Page_Call[T]) Return(vs []T, err error) *MockPageResolver_Page_Call[T] {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockPageResolver_Page_Call[T]) RunAndReturn(run func(ctx context.Context, idx int) ([]T, error)) *MockPageResolver_Page_Call[T] {
	_c.Call.Return(run)
	return _c
}
